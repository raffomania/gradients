["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$thi.ng.typedarrays.core","~:imports",null,"~:requires",null,"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$uint8",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/runner/work/gradients/gradients/resources/public/js/development/thi/ng/typedarrays/core.cljs","~:line",51,"~:column",7,"~:end-line",51,"~:end-column",12,"~:arglists",["~#list",["~$quote",["^E",[["~$size-or-coll"]]]]],"~:doc","Creates a native Uint8Array of the given size or from `coll`."],"^5","~$thi.ng.typedarrays.core/uint8","^?","resources/public/js/development/thi/ng/typedarrays/core.cljs","^C",12,"~:method-params",["^E",[["^G"]]],"~:protocol-impl",null,"~:arglists-meta",["^E",[null,null]],"^A",1,"~:variadic?",false,"^@",51,"~:ret-tag",["^4",[null,"~$js/Uint8Array"]],"^B",51,"~:max-fixed-arity",1,"~:fn-var",true,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Creates a native Uint8Array of the given size or from `coll`."],"~$typed-arrays-supported?",["^ ","^=",null,"^>",["^ ","^?","/home/runner/work/gradients/gradients/resources/public/js/development/thi/ng/typedarrays/core.cljs","^@",3,"^A",7,"^B",3,"^C",30,"^D",["^E",["^F",["^E",[[]]]]],"^H","Returns true if JS runtime supports typed arrays"],"^5","~$thi.ng.typedarrays.core/typed-arrays-supported?","^?","resources/public/js/development/thi/ng/typedarrays/core.cljs","^C",30,"^J",["^E",[[]]],"^K",null,"^L",["^E",[null,null]],"^A",1,"^M",false,"^@",3,"^N","~$boolean","^B",3,"^P",0,"^Q",true,"^D",["^E",["^F",["^E",[[]]]]],"^H","Returns true if JS runtime supports typed arrays"],"~$uint8-clamped",["^ ","^=",null,"^>",["^ ","^?","/home/runner/work/gradients/gradients/resources/public/js/development/thi/ng/typedarrays/core.cljs","^@",66,"^A",7,"^B",66,"^C",20,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Creates a native Uint8ClampedArray of the given size or from `coll`."],"^5","~$thi.ng.typedarrays.core/uint8-clamped","^?","resources/public/js/development/thi/ng/typedarrays/core.cljs","^C",20,"^J",["^E",[["^G"]]],"^K",null,"^L",["^E",[null,null]],"^A",1,"^M",false,"^@",66,"^N",["^4",[null,"~$js/Uint8ClampedArray"]],"^B",66,"^P",1,"^Q",true,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Creates a native Uint8ClampedArray of the given size or from `coll`."],"~$int32",["^ ","^=",null,"^>",["^ ","^?","/home/runner/work/gradients/gradients/resources/public/js/development/thi/ng/typedarrays/core.cljs","^@",111,"^A",7,"^B",111,"^C",12,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Creates a native Int32Array of the given size or from `coll`."],"^5","~$thi.ng.typedarrays.core/int32","^?","resources/public/js/development/thi/ng/typedarrays/core.cljs","^C",12,"^J",["^E",[["^G"]]],"^K",null,"^L",["^E",[null,null]],"^A",1,"^M",false,"^@",111,"^N",["^4",[null,"~$js/Int32Array"]],"^B",111,"^P",1,"^Q",true,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Creates a native Int32Array of the given size or from `coll`."],"~$int16",["^ ","^=",null,"^>",["^ ","^?","/home/runner/work/gradients/gradients/resources/public/js/development/thi/ng/typedarrays/core.cljs","^@",81,"^A",7,"^B",81,"^C",12,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Creates a native Int16Array of the given size or from `coll`."],"^5","~$thi.ng.typedarrays.core/int16","^?","resources/public/js/development/thi/ng/typedarrays/core.cljs","^C",12,"^J",["^E",[["^G"]]],"^K",null,"^L",["^E",[null,null]],"^A",1,"^M",false,"^@",81,"^N",["^4",[null,"~$js/Int16Array"]],"^B",81,"^P",1,"^Q",true,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Creates a native Int16Array of the given size or from `coll`."],"~$float32",["^ ","^=",null,"^>",["^ ","^?","/home/runner/work/gradients/gradients/resources/public/js/development/thi/ng/typedarrays/core.cljs","^@",141,"^A",7,"^B",141,"^C",14,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Creates a native Float32Array of the given size or from `coll`."],"^5","~$thi.ng.typedarrays.core/float32","^?","resources/public/js/development/thi/ng/typedarrays/core.cljs","^C",14,"^J",["^E",[["^G"]]],"^K",null,"^L",["^E",[null,null]],"^A",1,"^M",false,"^@",141,"^N",["^4",[null,"~$js/Float32Array"]],"^B",141,"^P",1,"^Q",true,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Creates a native Float32Array of the given size or from `coll`."],"~$array-types",["^ ","^>",["^ ","^?","/home/runner/work/gradients/gradients/resources/public/js/development/thi/ng/typedarrays/core.cljs","^@",7,"^A",16,"^B",7,"^C",27,"~:private",true],"^16",true,"^5","~$thi.ng.typedarrays.core/array-types","^?","resources/public/js/development/thi/ng/typedarrays/core.cljs","^C",27,"^A",1,"^@",7,"^B",7,"~:tag","~$cljs.core/IMap"],"~$float64",["^ ","^=",null,"^>",["^ ","^?","/home/runner/work/gradients/gradients/resources/public/js/development/thi/ng/typedarrays/core.cljs","^@",156,"^A",7,"^B",156,"^C",14,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Creates a native Float64Array of the given size or from `coll`."],"^5","~$thi.ng.typedarrays.core/float64","^?","resources/public/js/development/thi/ng/typedarrays/core.cljs","^C",14,"^J",["^E",[["^G"]]],"^K",null,"^L",["^E",[null,null]],"^A",1,"^M",false,"^@",156,"^N",["^4",[null,"~$js/Float64Array"]],"^B",156,"^P",1,"^Q",true,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Creates a native Float64Array of the given size or from `coll`."],"~$array-type",["^ ","^=",null,"^>",["^ ","^?","/home/runner/work/gradients/gradients/resources/public/js/development/thi/ng/typedarrays/core.cljs","^@",25,"^A",7,"^B",25,"^C",17,"^D",["^E",["^F",["^E",[["~$x"]]]]]],"^5","~$thi.ng.typedarrays.core/array-type","^?","resources/public/js/development/thi/ng/typedarrays/core.cljs","^C",17,"^J",["^E",[["~$x"]]],"^K",null,"^L",["^E",[null,null]],"^A",1,"^M",false,"^@",25,"^N",["^4",["~$any","~$cljs.core/Keyword","~$clj-nil"]],"^B",25,"^P",1,"^Q",true,"^D",["^E",["^F",["^E",[["~$x"]]]]]],"~$uint16",["^ ","^=",null,"^>",["^ ","^?","/home/runner/work/gradients/gradients/resources/public/js/development/thi/ng/typedarrays/core.cljs","^@",96,"^A",7,"^B",96,"^C",13,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Creates a native Uint16Array of the given size or from `coll`."],"^5","~$thi.ng.typedarrays.core/uint16","^?","resources/public/js/development/thi/ng/typedarrays/core.cljs","^C",13,"^J",["^E",[["^G"]]],"^K",null,"^L",["^E",[null,null]],"^A",1,"^M",false,"^@",96,"^N",["^4",[null,"~$js/Uint16Array"]],"^B",96,"^P",1,"^Q",true,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Creates a native Uint16Array of the given size or from `coll`."],"~$int8",["^ ","^=",null,"^>",["^ ","^?","/home/runner/work/gradients/gradients/resources/public/js/development/thi/ng/typedarrays/core.cljs","^@",36,"^A",7,"^B",36,"^C",11,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Creates a native Int8Array of the given size or from `coll`."],"^5","~$thi.ng.typedarrays.core/int8","^?","resources/public/js/development/thi/ng/typedarrays/core.cljs","^C",11,"^J",["^E",[["^G"]]],"^K",null,"^L",["^E",[null,null]],"^A",1,"^M",false,"^@",36,"^N",["^4",[null,"~$js/Int8Array"]],"^B",36,"^P",1,"^Q",true,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Creates a native Int8Array of the given size or from `coll`."],"~$uint32",["^ ","^=",null,"^>",["^ ","^?","/home/runner/work/gradients/gradients/resources/public/js/development/thi/ng/typedarrays/core.cljs","^@",126,"^A",7,"^B",126,"^C",13,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Creates a native Uint32Array of the given size or from `coll`."],"^5","~$thi.ng.typedarrays.core/uint32","^?","resources/public/js/development/thi/ng/typedarrays/core.cljs","^C",13,"^J",["^E",[["^G"]]],"^K",null,"^L",["^E",[null,null]],"^A",1,"^M",false,"^@",126,"^N",["^4",[null,"~$js/Uint32Array"]],"^B",126,"^P",1,"^Q",true,"^D",["^E",["^F",["^E",[["^G"]]]]],"^H","Creates a native Uint32Array of the given size or from `coll`."],"~$typed-array?",["^ ","^=",null,"^>",["^ ","^?","/home/runner/work/gradients/gradients/resources/public/js/development/thi/ng/typedarrays/core.cljs","^@",18,"^A",7,"^B",18,"^C",19,"^D",["^E",["^F",["^E",[["~$x"]]]]],"^H","Returns truthy value if the given arg is a typed array instance"],"^5","~$thi.ng.typedarrays.core/typed-array?","^?","resources/public/js/development/thi/ng/typedarrays/core.cljs","^C",19,"^J",["^E",[["~$x"]]],"^K",null,"^L",["^E",[null,null]],"^A",1,"^M",false,"^@",18,"^N",["^4",["^1?","^1A"]],"^B",18,"^P",1,"^Q",true,"^D",["^E",["^F",["^E",[["~$x"]]]]],"^H","Returns truthy value if the given arg is a typed array instance"]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:int32","~:uint8-clamped","~:int16","~:float32","~:float64","~:else","~:uint16","~:array","~:int8","~:uint32","~:uint8"]],"~:order",["^1U","^1[","^1Y","^1R","^1W","^1S","^1Z","^1T","^1Q","^1X","^1V"]],"^H",null]